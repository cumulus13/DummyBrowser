name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Create assets directory
      run: mkdir assets -ErrorAction SilentlyContinue
      shell: powershell
      
    - name: Create dummy images (if Python available)
      run: |
        try {
          pip install Pillow rich
          python simple_create_images.py
        } catch {
          Write-Host "Python not available, skipping image creation"
        }
      shell: powershell
      continue-on-error: true
      
    - name: Setup Inno Setup
      shell: powershell
      run: |
        $url = "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe"
        $output = "innosetup-installer.exe"
        
        Write-Host "Downloading Inno Setup from: $url"
        Invoke-WebRequest -Uri $url -OutFile $output -UserAgent "Mozilla/5.0"
        
        Write-Host "Installing Inno Setup..."
        Start-Process -FilePath $output -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait -PassThru
        
        Start-Sleep -Seconds 10
        
        $isccPath = "C:\Program Files (x86)\Inno Setup 6\ISCC.exe"
        if (Test-Path $isccPath) {
          Write-Host "Inno Setup installed successfully at: $isccPath"
        } else {
          Write-Host "Checking alternative location..."
          $altPath = "C:\Program Files\Inno Setup 6\ISCC.exe"
          if (Test-Path $altPath) {
            Write-Host "Found Inno Setup at: $altPath"
          } else {
            throw "Inno Setup installation failed - ISCC.exe not found"
          }
        }
      
    - name: Create LICENSE.txt if missing
      shell: powershell
      run: |
        if (-not (Test-Path "LICENSE.txt")) {
          Write-Host "Creating default LICENSE.txt..."
          "MIT License" | Out-File -FilePath "LICENSE.txt" -Encoding UTF8
          "" | Out-File -FilePath "LICENSE.txt" -Encoding UTF8 -Append
          "Permission is hereby granted, free of charge, to any person obtaining a copy" | Out-File -FilePath "LICENSE.txt" -Encoding UTF8 -Append
          "of this software and associated documentation files, to deal in the Software" | Out-File -FilePath "LICENSE.txt" -Encoding UTF8 -Append
          "without restriction, including without limitation the rights to use, copy," | Out-File -FilePath "LICENSE.txt" -Encoding UTF8 -Append
          "modify, merge, publish, distribute, sublicense, and/or sell copies of the" | Out-File -FilePath "LICENSE.txt" -Encoding UTF8 -Append
          "Software, and to permit persons to whom the Software is furnished to do so." | Out-File -FilePath "LICENSE.txt" -Encoding UTF8 -Append
          "" | Out-File -FilePath "LICENSE.txt" -Encoding UTF8 -Append
          "THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND." | Out-File -FilePath "LICENSE.txt" -Encoding UTF8 -Append
        }
      
    - name: Build Installer
      shell: powershell
      run: |
        $isccPaths = @(
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
          "C:\Program Files\Inno Setup 6\ISCC.exe"
        )
        
        $isccPath = $null
        foreach ($path in $isccPaths) {
          if (Test-Path $path) {
            $isccPath = $path
            break
          }
        }
        
        if (-not $isccPath) {
          throw "ISCC.exe not found in any expected location"
        }
        
        Write-Host "Using Inno Setup at: $isccPath"
        
        if (-not (Test-Path "installer_output")) {
          mkdir installer_output
        }
        
        & $isccPath "DummyBrowser.iss"
        
        if ($LASTEXITCODE -ne 0) {
          throw "Inno Setup build failed with exit code: $LASTEXITCODE"
        }
        
        $installerPath = "installer_output\LinkClipboardManager_Setup.exe"
        if (Test-Path $installerPath) {
          $size = (Get-Item $installerPath).Length
          Write-Host "Installer created successfully: $installerPath ($([math]::Round($size/1MB, 2)) MB)"
        } else {
          throw "Installer file not found at: $installerPath"
        }
      
    - name: Create Portable Version
      shell: powershell
      run: |
        $portableDir = "LinkClipboardManager_Portable"
        $releaseDir = "bin\Release\net7.0-windows"
        
        if (Test-Path $portableDir) {
          Remove-Item $portableDir -Recurse -Force
        }
        mkdir $portableDir
        
        Copy-Item "$releaseDir\*" $portableDir -Recurse
        
        if (Test-Path "README.md") { Copy-Item "README.md" $portableDir }
        if (Test-Path "LICENSE.txt") { Copy-Item "LICENSE.txt" $portableDir }
        if (Test-Path "setup_registry.bat") { Copy-Item "setup_registry.bat" $portableDir }
        
        $configPath = "$portableDir\config.json"
        if (-not (Test-Path $configPath)) {
          "{" | Out-File -FilePath $configPath -Encoding UTF8
          '  "ShowPrompt": true,' | Out-File -FilePath $configPath -Encoding UTF8 -Append
          '  "AppName": "Link Clipboard Manager",' | Out-File -FilePath $configPath -Encoding UTF8 -Append
          '  "ShowSuccessMessage": true' | Out-File -FilePath $configPath -Encoding UTF8 -Append
          "}" | Out-File -FilePath $configPath -Encoding UTF8 -Append
        }
        
        $readmePath = "$portableDir\PORTABLE_README.txt"
        "# Link Clipboard Manager - Portable Version" | Out-File -FilePath $readmePath -Encoding UTF8
        "" | Out-File -FilePath $readmePath -Encoding UTF8 -Append
        "## Quick Setup" | Out-File -FilePath $readmePath -Encoding UTF8 -Append
        "1. Run 'setup_registry.bat' as Administrator" | Out-File -FilePath $readmePath -Encoding UTF8 -Append
        "2. The application will be registered as a browser option" | Out-File -FilePath $readmePath -Encoding UTF8 -Append
        "" | Out-File -FilePath $readmePath -Encoding UTF8 -Append
        "## Manual Usage" | Out-File -FilePath $readmePath -Encoding UTF8 -Append
        'Run: DummyBrowser.exe "https://example.com"' | Out-File -FilePath $readmePath -Encoding UTF8 -Append
        
        Compress-Archive -Path $portableDir -DestinationPath "LinkClipboardManager_Portable.zip" -Force
        
        $zipSize = (Get-Item "LinkClipboardManager_Portable.zip").Length
        Write-Host "Portable version created: LinkClipboardManager_Portable.zip ($([math]::Round($zipSize/1MB, 2)) MB)"
      
    - name: Get version from tag
      id: version
      shell: powershell
      run: |
        $version = "${{ github.ref_name }}" -replace '^v', ''
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        Write-Host "Version: $version"
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Link Clipboard Manager ${{ github.ref_name }}
        body: |
          ## Link Clipboard Manager ${{ github.ref_name }}
          
          A lightweight tool that copies URLs to clipboard instead of opening them in a browser.
          
          ### Installation Options
          
          **Option 1: Easy Installer (Recommended)**
          1. Download LinkClipboardManager_Setup.exe below
          2. Run as Administrator
          3. Follow the installation wizard
          4. The app will be automatically registered as a browser option
          
          **Option 2: Portable Version**
          1. Download LinkClipboardManager_Portable.zip
          2. Extract to any folder
          3. Run setup_registry.bat as Administrator to register
          
          ### Features
          - Copies links to clipboard instead of opening browser
          - Configurable via JSON file
          - Easy Windows integration
          - Professional installer
          - Auto-update notifications
          
          ### Configuration
          Edit config.json to customize:
          - ShowPrompt: Show confirmation dialog
          - AppName: Display name
          - ShowSuccessMessage: Show success notification
          
          ### Release Info
          - Built from: ${{ github.sha }}
          - Build date: ${{ github.event.head_commit.timestamp }}
          - Platform: Windows (.NET 7.0)
        files: |
          installer_output/LinkClipboardManager_Setup.exe
          LinkClipboardManager_Portable.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}